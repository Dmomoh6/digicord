{"remainingRequest":"/Users/dmomoh/Desktop/digicord/node_modules/thread-loader/dist/cjs.js!/Users/dmomoh/Desktop/digicord/node_modules/babel-loader/lib/index.js!/Users/dmomoh/Desktop/digicord/node_modules/eslint-loader/index.js??ref--13-0!/Users/dmomoh/Desktop/digicord/src/store.js","dependencies":[{"path":"/Users/dmomoh/Desktop/digicord/src/store.js","mtime":1641834445275},{"path":"/Users/dmomoh/Desktop/digicord/babel.config.js","mtime":1600109133000},{"path":"/Users/dmomoh/Desktop/digicord/node_modules/cache-loader/dist/cjs.js","mtime":1641060581900},{"path":"/Users/dmomoh/Desktop/digicord/node_modules/thread-loader/dist/cjs.js","mtime":1641060585559},{"path":"/Users/dmomoh/Desktop/digicord/node_modules/babel-loader/lib/index.js","mtime":1641834027438},{"path":"/Users/dmomoh/Desktop/digicord/node_modules/eslint-loader/index.js","mtime":1641060586093}],"contextDependencies":[],"result":["import _Array$from from \"/Users/dmomoh/Desktop/digicord/node_modules/@babel/runtime-corejs2/core-js/array/from.js\";\nimport _Symbol from \"/Users/dmomoh/Desktop/digicord/node_modules/@babel/runtime-corejs2/core-js/symbol.js\";\nimport _Symbol$iterator from \"/Users/dmomoh/Desktop/digicord/node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es6.function.name\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof _Symbol !== \"undefined\" && o[_Symbol$iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return _Array$from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport defaultBoard from './default-board';\nimport { saveStatePlugin, uuid } from './utils';\nimport { newBoard } from './new-board';\nVue.use(Vuex);\nvar overboard = JSON.parse(localStorage.getItem('overboard')) || defaultBoard;\nvar active = {\n  board: overboard.board[0],\n  type: 'board'\n};\nexport default new Vuex.Store({\n  plugins: [saveStatePlugin],\n  state: {\n    overboard: overboard,\n    active: active\n  },\n  getters: {\n    getTask: function getTask(state) {\n      return function (id) {\n        var _iterator = _createForOfIteratorHelper(active.board.columns),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var column = _step.value;\n\n            var _iterator2 = _createForOfIteratorHelper(column.tasks),\n                _step2;\n\n            try {\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                var task = _step2.value;\n\n                if (task.id === id) {\n                  return task;\n                }\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      };\n    },\n    getTaskColumn: function getTaskColumn(state) {\n      return function (id) {\n        var _iterator3 = _createForOfIteratorHelper(active.board.columns),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var column = _step3.value;\n            var count = 0;\n\n            var _iterator4 = _createForOfIteratorHelper(column.tasks),\n                _step4;\n\n            try {\n              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                var task = _step4.value;\n                count++;\n\n                if (task.id === id) {\n                  return count - 1;\n                }\n              }\n            } catch (err) {\n              _iterator4.e(err);\n            } finally {\n              _iterator4.f();\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      };\n    },\n    getBoardIndex: function getBoardIndex(state) {\n      return function (id) {\n        var count = 0;\n\n        var _iterator5 = _createForOfIteratorHelper(state.overboard.board),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var board = _step5.value;\n\n            if (board.id === id) {\n              return count;\n            } else {\n              count++;\n            }\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      };\n    },\n    getColumn: function getColumn(state) {\n      return function (id) {\n        var _iterator6 = _createForOfIteratorHelper(active.board.columns),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var column = _step6.value;\n\n            if (column.id === id) {\n              return column;\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n      };\n    },\n    getBoard: function getBoard(state) {\n      return active.board;\n    },\n    getBoardList: function getBoardList(state) {\n      return overboard.board;\n    }\n  },\n  mutations: {\n    CREATE_TASK: function CREATE_TASK(state, _ref) {\n      var tasks = _ref.tasks,\n          name = _ref.name;\n\n      if (name) {\n        tasks.push({\n          name: name,\n          id: uuid(),\n          description: ''\n        });\n      }\n    },\n    CREATE_COLUMN: function CREATE_COLUMN(state, _ref2) {\n      var name = _ref2.name;\n      state.active.board.columns.push({\n        name: name,\n        id: uuid(),\n        tasks: []\n      });\n    },\n    DELETE_COLUMN: function DELETE_COLUMN(state, _ref3) {\n      var fromColumnIndex = _ref3.fromColumnIndex;\n      state.active.board.columns.splice(fromColumnIndex, 1);\n    },\n    RENAME_COLUMN: function RENAME_COLUMN(state, _ref4) {\n      var name = _ref4.name,\n          fromColumnIndex = _ref4.fromColumnIndex;\n    },\n    UPDATE_COLUMN: function UPDATE_COLUMN(state, _ref5) {\n      var column = _ref5.column,\n          key = _ref5.key,\n          value = _ref5.value;\n\n      if (value) {\n        column[key] = value;\n      } else {\n        column[key] = 'Untitiled';\n      }\n    },\n    UPDATE_TASK: function UPDATE_TASK(state, _ref6) {\n      var task = _ref6.task,\n          key = _ref6.key,\n          value = _ref6.value;\n\n      if (value) {\n        task[key] = value;\n      } else {\n        task[key] = 'No Task';\n      }\n    },\n    DELETE_TASK: function DELETE_TASK(state, _ref7) {\n      var task = _ref7.task,\n          column = _ref7.column,\n          getters = _ref7.getters;\n      var index = this.getters.getTaskColumn(task.id);\n      column.tasks.splice(index, 1);\n    },\n    DELETE_BOARD: function DELETE_BOARD(state, _ref8) {\n      var board = _ref8.board,\n          getters = _ref8.getters;\n\n      if (state.overboard.board.length > 1) {\n        var index = this.getters.getBoardIndex(board.id);\n        state.overboard.board.splice(index, 1);\n\n        if (board.id === active.board.id) {\n          state.active.board = state.overboard.board[0];\n        }\n      } else {\n        alert('You must have at least one board');\n      }\n    },\n    UPDATE_BOARD: function UPDATE_BOARD(state, _ref9) {\n      var board = _ref9.board,\n          key = _ref9.key,\n          value = _ref9.value;\n\n      if (value) {\n        state.active.board[key] = value;\n      } else {\n        state.active.board[key] = 'Untitled';\n      }\n    },\n    MOVE_TASK: function MOVE_TASK(state, _ref10) {\n      var fromTasks = _ref10.fromTasks,\n          toTasks = _ref10.toTasks,\n          fromTaskIndex = _ref10.fromTaskIndex,\n          toTaskIndex = _ref10.toTaskIndex;\n      var taskToMove = fromTasks.splice(fromTaskIndex, 1)[0];\n      toTasks.splice(toTaskIndex, 0, taskToMove);\n    },\n    MOVE_COLUMN: function MOVE_COLUMN(state, _ref11) {\n      var fromColumnIndex = _ref11.fromColumnIndex,\n          toColumnIndex = _ref11.toColumnIndex;\n      var columnList = state.active.board.columns;\n      var columnToMove = columnList.splice(fromColumnIndex, 1)[0];\n      columnList.splice(toColumnIndex, 0, columnToMove);\n    },\n    CHANGE_BOARD: function CHANGE_BOARD(state, index) {\n      Vue.set(active, 'board', state.overboard.board[index]);\n    },\n    CREATE_BOARD: function CREATE_BOARD(state) {\n      if (state.overboard.board.length < 5) {\n        state.overboard.board.push(newBoard());\n        Vue.set(active, 'board', state.overboard.board[state.overboard.board.length - 1]);\n      } else {\n        alert(\"Can't have more than 5 active boards at a time\");\n      }\n    }\n  }\n});",{"version":3,"sources":["/Users/dmomoh/Desktop/digicord/src/store.js"],"names":["Vue","Vuex","defaultBoard","saveStatePlugin","uuid","newBoard","use","overboard","JSON","parse","localStorage","getItem","active","board","type","Store","plugins","state","getters","getTask","id","columns","column","tasks","task","getTaskColumn","count","getBoardIndex","getColumn","getBoard","getBoardList","mutations","CREATE_TASK","name","push","description","CREATE_COLUMN","DELETE_COLUMN","fromColumnIndex","splice","RENAME_COLUMN","UPDATE_COLUMN","key","value","UPDATE_TASK","DELETE_TASK","index","DELETE_BOARD","length","alert","UPDATE_BOARD","MOVE_TASK","fromTasks","toTasks","fromTaskIndex","toTaskIndex","taskToMove","MOVE_COLUMN","toColumnIndex","columnList","columnToMove","CHANGE_BOARD","set","CREATE_BOARD"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport defaultBoard from './default-board'\nimport { saveStatePlugin, uuid } from './utils'\nimport { newBoard } from './new-board'\n\nVue.use(Vuex)\n\nconst overboard = JSON.parse(localStorage.getItem('overboard')) || defaultBoard\n\nvar active = {\n  board: overboard.board[0],\n  type: 'board'\n}\nexport default new Vuex.Store({\n  plugins: [saveStatePlugin],\n  state: {\n    overboard,\n    active\n  },\n  getters: {\n    getTask (state) {\n      return (id) => {\n        for (const column of active.board.columns) {\n          for (const task of column.tasks) {\n            if (task.id === id) {\n              return task\n            }\n          }\n        }\n      }\n    },\n    getTaskColumn (state) {\n      return (id) => {\n        for (const column of active.board.columns) {\n          let count = 0\n          for (const task of column.tasks) {\n            count++\n            if (task.id === id) {\n              return (count - 1)\n            }\n          }\n        }\n      }\n    },\n    getBoardIndex (state) {\n      return (id) => {\n        let count = 0\n        for (const board of state.overboard.board) {\n          if (board.id === id) {\n            return (count)\n          } else {\n            count++\n          }\n        }\n      }\n    },\n    getColumn (state) {\n      return (id) => {\n        for (const column of active.board.columns) {\n          if (column.id === id) {\n            return column\n          }\n        }\n      }\n    },\n    getBoard (state) {\n      return active.board\n    },\n    getBoardList (state) {\n      return overboard.board\n    }\n  },\n  mutations: {\n    CREATE_TASK (state, { tasks, name }) {\n      if (name) {\n        tasks.push({\n          name,\n          id: uuid(),\n          description: ''\n        })\n      }\n    },\n    CREATE_COLUMN (state, { name }) {\n      state.active.board.columns.push({\n        name,\n        id: uuid(),\n        tasks: []\n      })\n    },\n    DELETE_COLUMN (state, { fromColumnIndex }) {\n      state.active.board.columns.splice(fromColumnIndex, 1)\n    },\n    RENAME_COLUMN (state, { name, fromColumnIndex }) {\n\n    },\n    UPDATE_COLUMN (state, { column, key, value }) {\n      if (value) {\n        column[key] = value\n      } else {\n        column[key] = 'Untitiled'\n      }\n    },\n    UPDATE_TASK (state, { task, key, value }) {\n      if (value) {\n        task[key] = value\n      } else {\n        task[key] = 'No Task'\n      }\n    },\n    DELETE_TASK (state, { task, column, getters }) {\n      let index = this.getters.getTaskColumn(task.id)\n      column.tasks.splice(index, 1)\n    },\n    DELETE_BOARD (state, { board, getters }) {\n      if (state.overboard.board.length > 1) {\n        let index = this.getters.getBoardIndex(board.id)\n        state.overboard.board.splice(index, 1)\n        if (board.id === active.board.id) { state.active.board = state.overboard.board[0] }\n      } else {\n        alert('You must have at least one board')\n      }\n    },\n    UPDATE_BOARD (state, { board, key, value }) {\n      if (value) {\n        state.active.board[key] = value\n      } else {\n        state.active.board[key] = 'Untitled'\n      }\n    },\n    MOVE_TASK (state, { fromTasks, toTasks, fromTaskIndex, toTaskIndex }) {\n      const taskToMove = fromTasks.splice(fromTaskIndex, 1)[0]\n      toTasks.splice(toTaskIndex, 0, taskToMove)\n    },\n    MOVE_COLUMN (state, { fromColumnIndex, toColumnIndex }) {\n      const columnList = state.active.board.columns\n\n      const columnToMove = columnList.splice(fromColumnIndex, 1)[0]\n      columnList.splice(toColumnIndex, 0, columnToMove)\n    },\n    CHANGE_BOARD (state, index) {\n      Vue.set(active, 'board', state.overboard.board[index])\n    },\n    CREATE_BOARD (state) {\n      if (state.overboard.board.length < 5) {\n        state.overboard.board.push(newBoard())\n        Vue.set(active, 'board', state.overboard.board[(state.overboard.board.length - 1)])\n      } else {\n        alert(\"Can't have more than 5 active boards at a time\")\n      }\n    }\n  }\n})\n"]}]}