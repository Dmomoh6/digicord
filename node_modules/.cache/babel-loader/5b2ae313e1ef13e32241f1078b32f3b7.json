{"remainingRequest":"/Users/dmomoh/Desktop/digicord/node_modules/babel-loader/lib/index.js!/Users/dmomoh/Desktop/digicord/node_modules/eslint-loader/index.js??ref--13-0!/Users/dmomoh/Desktop/digicord/src/store.js","dependencies":[{"path":"/Users/dmomoh/Desktop/digicord/src/store.js","mtime":1641829853951},{"path":"/Users/dmomoh/Desktop/digicord/node_modules/cache-loader/dist/cjs.js","mtime":1641060581900},{"path":"/Users/dmomoh/Desktop/digicord/node_modules/babel-loader/lib/index.js","mtime":1641060592557},{"path":"/Users/dmomoh/Desktop/digicord/node_modules/eslint-loader/index.js","mtime":1641060586093}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport _getIterator from \"/Users/dmomoh/Desktop/digicord/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport defaultBoard from './default-board';\nimport { saveStatePlugin, uuid } from './utils';\nimport { newBoard } from './new-board';\nVue.use(Vuex);\nvar overboard = JSON.parse(localStorage.getItem('overboard')) || defaultBoard;\nvar active = {\n  board: overboard.board[0],\n  type: 'board'\n};\nexport default new Vuex.Store({\n  plugins: [saveStatePlugin],\n  state: {\n    overboard: overboard,\n    active: active\n  },\n  getters: {\n    getTask: function getTask(state) {\n      return function (id) {\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = _getIterator(active.board.columns), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var column = _step.value;\n            var _iteratorNormalCompletion2 = true;\n            var _didIteratorError2 = false;\n            var _iteratorError2 = undefined;\n\n            try {\n              for (var _iterator2 = _getIterator(column.tasks), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n                var task = _step2.value;\n\n                if (task.id === id) {\n                  return task;\n                }\n              }\n            } catch (err) {\n              _didIteratorError2 = true;\n              _iteratorError2 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                  _iterator2.return();\n                }\n              } finally {\n                if (_didIteratorError2) {\n                  throw _iteratorError2;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n      };\n    },\n    getTaskColumn: function getTaskColumn(state) {\n      return function (id) {\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = _getIterator(active.board.columns), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var column = _step3.value;\n            var count = 0;\n            var _iteratorNormalCompletion4 = true;\n            var _didIteratorError4 = false;\n            var _iteratorError4 = undefined;\n\n            try {\n              for (var _iterator4 = _getIterator(column.tasks), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n                var task = _step4.value;\n                count++;\n\n                if (task.id === id) {\n                  return count - 1;\n                }\n              }\n            } catch (err) {\n              _didIteratorError4 = true;\n              _iteratorError4 = err;\n            } finally {\n              try {\n                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n                  _iterator4.return();\n                }\n              } finally {\n                if (_didIteratorError4) {\n                  throw _iteratorError4;\n                }\n              }\n            }\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n      };\n    },\n    getBoardIndex: function getBoardIndex(state) {\n      return function (id) {\n        var count = 0;\n        var _iteratorNormalCompletion5 = true;\n        var _didIteratorError5 = false;\n        var _iteratorError5 = undefined;\n\n        try {\n          for (var _iterator5 = _getIterator(state.overboard.board), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n            var board = _step5.value;\n\n            if (board.id === id) {\n              return count;\n            } else {\n              count++;\n            }\n          }\n        } catch (err) {\n          _didIteratorError5 = true;\n          _iteratorError5 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n              _iterator5.return();\n            }\n          } finally {\n            if (_didIteratorError5) {\n              throw _iteratorError5;\n            }\n          }\n        }\n      };\n    },\n    getColumn: function getColumn(state) {\n      return function (id) {\n        var _iteratorNormalCompletion6 = true;\n        var _didIteratorError6 = false;\n        var _iteratorError6 = undefined;\n\n        try {\n          for (var _iterator6 = _getIterator(active.board.columns), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n            var column = _step6.value;\n\n            if (column.id === id) {\n              return column;\n            }\n          }\n        } catch (err) {\n          _didIteratorError6 = true;\n          _iteratorError6 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n              _iterator6.return();\n            }\n          } finally {\n            if (_didIteratorError6) {\n              throw _iteratorError6;\n            }\n          }\n        }\n      };\n    },\n    getBoard: function getBoard(state) {\n      return active.board;\n    },\n    getBoardList: function getBoardList(state) {\n      return overboard.board;\n    }\n  },\n  mutations: {\n    CREATE_TASK: function CREATE_TASK(state, _ref) {\n      var tasks = _ref.tasks,\n          name = _ref.name;\n\n      if (name) {\n        tasks.push({\n          name: name,\n          id: uuid(),\n          description: ''\n        });\n      }\n    },\n    CREATE_COLUMN: function CREATE_COLUMN(state, _ref2) {\n      var name = _ref2.name;\n      state.active.board.columns.push({\n        name: name,\n        id: uuid(),\n        tasks: []\n      });\n    },\n    DELETE_COLUMN: function DELETE_COLUMN(state, _ref3) {\n      var fromColumnIndex = _ref3.fromColumnIndex;\n      state.active.board.columns.splice(fromColumnIndex, 1);\n    },\n    RENAME_COLUMN: function RENAME_COLUMN(state, _ref4) {\n      var name = _ref4.name,\n          fromColumnIndex = _ref4.fromColumnIndex;\n    },\n    UPDATE_COLUMN: function UPDATE_COLUMN(state, _ref5) {\n      var column = _ref5.column,\n          key = _ref5.key,\n          value = _ref5.value;\n\n      if (value) {\n        column[key] = value;\n      } else {\n        column[key] = \"Untitiled\";\n      }\n    },\n    UPDATE_TASK: function UPDATE_TASK(state, _ref6) {\n      var task = _ref6.task,\n          key = _ref6.key,\n          value = _ref6.value;\n\n      if (value) {\n        task[key] = value;\n      } else {\n        task[key] = \"No Task\";\n      }\n    },\n    DELETE_TASK: function DELETE_TASK(state, _ref7) {\n      var task = _ref7.task,\n          column = _ref7.column,\n          getters = _ref7.getters;\n      var index = this.getters.getTaskColumn(task.id);\n      column.tasks.splice(index, 1);\n    },\n    DELETE_BOARD: function DELETE_BOARD(state, _ref8) {\n      var board = _ref8.board,\n          getters = _ref8.getters;\n\n      if (state.overboard.board.length > 1) {\n        var index = this.getters.getBoardIndex(board.id);\n        state.overboard.board.splice(index, 1);\n\n        if (board.id === active.board.id) {\n          state.active.board = state.overboard.board[0];\n        }\n      } else {\n        alert('You must have at least one board');\n      }\n    },\n    UPDATE_BOARD: function UPDATE_BOARD(state, _ref9) {\n      var board = _ref9.board,\n          key = _ref9.key,\n          value = _ref9.value;\n\n      if (value) {\n        state.active.board[key] = value;\n      } else {\n        state.active.board[key] = \"Untitled\";\n      }\n    },\n    MOVE_TASK: function MOVE_TASK(state, _ref10) {\n      var fromTasks = _ref10.fromTasks,\n          toTasks = _ref10.toTasks,\n          fromTaskIndex = _ref10.fromTaskIndex,\n          toTaskIndex = _ref10.toTaskIndex;\n      var taskToMove = fromTasks.splice(fromTaskIndex, 1)[0];\n      toTasks.splice(toTaskIndex, 0, taskToMove);\n    },\n    MOVE_COLUMN: function MOVE_COLUMN(state, _ref11) {\n      var fromColumnIndex = _ref11.fromColumnIndex,\n          toColumnIndex = _ref11.toColumnIndex;\n      var columnList = state.active.board.columns;\n      var columnToMove = columnList.splice(fromColumnIndex, 1)[0];\n      columnList.splice(toColumnIndex, 0, columnToMove);\n    },\n    CHANGE_BOARD: function CHANGE_BOARD(state, index) {\n      Vue.set(active, 'board', state.overboard.board[index]);\n    },\n    CREATE_BOARD: function CREATE_BOARD(state) {\n      if (state.overboard.board.length < 5) {\n        state.overboard.board.push(newBoard());\n        Vue.set(active, 'board', state.overboard.board[state.overboard.board.length - 1]);\n      } else {\n        alert(\"Can't have more than 5 active boards at a time\");\n      }\n    }\n  }\n});",{"version":3,"sources":["/Users/dmomoh/Desktop/digicord/src/store.js"],"names":["Vue","Vuex","defaultBoard","saveStatePlugin","uuid","newBoard","use","overboard","JSON","parse","localStorage","getItem","active","board","type","Store","plugins","state","getters","getTask","id","columns","column","tasks","task","getTaskColumn","count","getBoardIndex","getColumn","getBoard","getBoardList","mutations","CREATE_TASK","name","push","description","CREATE_COLUMN","DELETE_COLUMN","fromColumnIndex","splice","RENAME_COLUMN","UPDATE_COLUMN","key","value","UPDATE_TASK","DELETE_TASK","index","DELETE_BOARD","length","alert","UPDATE_BOARD","MOVE_TASK","fromTasks","toTasks","fromTaskIndex","toTaskIndex","taskToMove","MOVE_COLUMN","toColumnIndex","columnList","columnToMove","CHANGE_BOARD","set","CREATE_BOARD"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport defaultBoard from './default-board'\nimport { saveStatePlugin, uuid } from './utils'\nimport { newBoard } from './new-board'\n\nVue.use(Vuex)\n\nconst overboard = JSON.parse(localStorage.getItem('overboard')) || defaultBoard\n\nvar active = {\n  board: overboard.board[0],\n  type: 'board'\n}\nexport default new Vuex.Store({\n  plugins: [saveStatePlugin],\n  state: {\n    overboard,\n    active\n  },\n  getters: {\n    getTask (state) {\n      return (id) => {\n        for (const column of active.board.columns) {\n          for (const task of column.tasks) {\n            if (task.id === id) {\n              return task\n            }\n          }\n        }\n      }\n    },\n    getTaskColumn (state) {\n      return (id) => {\n        for (const column of active.board.columns) {\n          let count = 0\n          for (const task of column.tasks) {\n            count++\n            if (task.id === id) {\n              return (count - 1)\n            }\n          }\n        }\n      }\n    },\n    getBoardIndex (state) {\n      return (id) => {\n        let count = 0\n        for (const board of state.overboard.board) {\n          if (board.id === id) {\n            return (count)\n          } else {\n            count++\n          }\n        }\n      }\n    },\n    getColumn (state) {\n      return (id) => {\n        for (const column of active.board.columns) {\n          if (column.id === id) {\n            return column\n          }\n        }\n      }\n    },\n    getBoard (state) {\n      return active.board\n    },\n    getBoardList (state) {\n      return overboard.board\n    }\n  },\n  mutations: {\n    CREATE_TASK (state, { tasks, name }) {\n      if(name){\n      tasks.push({\n        name,\n        id: uuid(),\n        description: ''\n      })\n    }\n    },\n    CREATE_COLUMN (state, { name }) {\n      state.active.board.columns.push({\n        name,\n        id: uuid(),\n        tasks: []\n      })\n    },\n    DELETE_COLUMN (state, { fromColumnIndex }) {\n      state.active.board.columns.splice(fromColumnIndex, 1)\n    },\n    RENAME_COLUMN (state, { name, fromColumnIndex }) {\n\n    },\n    UPDATE_COLUMN (state, { column, key, value }) {\n      if(value)\n      {\n      column[key] = value  \n      }\n      else\n      {\n        column[key] = \"Untitiled\"\n      }  \n    },\n    UPDATE_TASK (state, { task, key, value }) {\n      if(value)\n      {\n      task[key] = value  \n      }\n      else\n      {\n       task[key] = \"No Task\"\n      }\n    },\n    DELETE_TASK (state, { task, column, getters }) {\n      let index = this.getters.getTaskColumn(task.id)\n      column.tasks.splice(index, 1)\n    },\n    DELETE_BOARD (state, { board, getters }) {\n      if (state.overboard.board.length > 1) {\n        let index = this.getters.getBoardIndex(board.id)\n        state.overboard.board.splice(index, 1)\n        if (board.id === active.board.id) { state.active.board = state.overboard.board[0] }\n      } else {\n        alert('You must have at least one board')\n      }\n    },\n    UPDATE_BOARD (state, { board, key, value }) {\n        if(value){\n      state.active.board[key] = value\n    }\n    else\n    {\n      state.active.board[key] = \"Untitled\"\n    }\n    },\n    MOVE_TASK (state, { fromTasks, toTasks, fromTaskIndex, toTaskIndex }) {\n      const taskToMove = fromTasks.splice(fromTaskIndex, 1)[0]\n      toTasks.splice(toTaskIndex, 0, taskToMove)\n    },\n    MOVE_COLUMN (state, { fromColumnIndex, toColumnIndex }) {\n      const columnList = state.active.board.columns\n\n      const columnToMove = columnList.splice(fromColumnIndex, 1)[0]\n      columnList.splice(toColumnIndex, 0, columnToMove)\n    },\n    CHANGE_BOARD (state, index) {\n      Vue.set(active, 'board', state.overboard.board[index])\n    },\n    CREATE_BOARD (state) {\n      if (state.overboard.board.length < 5) {\n        state.overboard.board.push(newBoard())\n        Vue.set(active, 'board', state.overboard.board[(state.overboard.board.length - 1)])\n      } else {\n        alert(\"Can't have more than 5 active boards at a time\")\n      }\n    }\n  }\n})\n"]}]}